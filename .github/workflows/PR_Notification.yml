name: PR Slack Notification
on:
  pull_request:
    types: [opened]

jobs:
  slack-notification:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get reviewers
        id: get-reviewers
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        run: |
          declare -A reviewer_map
          IFS=$'\n'
          for entry in $(echo '${{ secrets.SLACK_IDS }}' | jq -r 'to_entries | map("\(.key)=\(.value)") | .[]'); do
            key=${entry%%=*}
            value=${entry#*=}
            reviewer_map["$key"]="$value"
          done

          for reviewer in $(gh pr view ${{ github.event.pull_request.number }} --json reviews --jq '.reviews[].author.login'); do
            if [[ -n "${reviewer_map[$reviewer]}" ]]; then
              reviewers+="<@${reviewer_map[$reviewer]}>,"
            fi
          done
          echo "PR Reviews: $(gh pr view ${{ github.event.pull_request.number }} --json reviews --jq '.reviews')")

      - name: Slack Notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🔥 *${{ github.event.pull_request.title }}에 대한 <${{ github.event.pull_request.html_url }}| pull request>가 생성되었습니다.* 🔥"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.get-reviewers.outputs.reviewers }}의 리뷰를 기다리고 있어요!"
                  }
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_PR_CREATE_WEBHOOK_URL }}
